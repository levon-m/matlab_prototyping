function MuTron
% Mu-Tron-style octave-down in real time
% -------------------------------------
% • Constant-amplitude square-wave sub generated by flip-flop ÷2
% • Optional envelope follower restores picking dynamics
% • Wet/Dry + sweepable low-pass   (1-pole IIR)
% • GUI & timescope identical to OC-2 demo
% • Close GUI window to stop streaming

%% 1) User settings -------------------------------------------------------
inFile   = "Chord Memory.wav";    % mono/stereo WAV @ 48 kHz
block    = 512;                   % buffer size
wetInit  = 0.8;                   % 0‒1
fcInit   = 600;                   % Hz   LPF start
fcRange  = [100 12000];           % Hz   slider limits
fcStep   = 5;                     % Hz   re-tune threshold
dynSens  = 0.99;                  % env follower decay (≈ 80 ms)

%% 2) I/O objects ---------------------------------------------------------
reader = dsp.AudioFileReader(Filename=inFile, ...
                             SamplesPerFrame=block, ...
                             PlayCount=Inf);             % loop forever
Fs  = reader.SampleRate;

player = audioDeviceWriter(SampleRate=Fs,BufferSize=block);

%% 3) GUI -----------------------------------------------------------------
ui = uifigure(Name="Mu-Tron Octave-Down", ...
              Position=[50 50 380 165], ...
              CloseRequestFcn=@(~,~)delete(ui));
g  = uigridlayout(ui,[3 2],RowHeight={'fit','fit','1x'},Padding=8);

uilabel(g,"Text","Wet / Dry (%)","HorizontalAlignment","center");
wetS = uislider(g,Limits=[0 1],Value=wetInit,MajorTicks=0:0.25:1);

uilabel(g,"Text","LPF Cutoff (Hz)","HorizontalAlignment","center");
cutS = uislider(g,Limits=fcRange,Value=fcInit, ...
                MajorTicks=fcRange(1):3000:fcRange(2));

uilabel(g,"Text","Close window to stop playback", ...
        HorizontalAlignment="center",FontAngle="italic");

%% 4) Waveform scope ------------------------------------------------------
scope = timescope(SampleRate=Fs, ...
                  TimeSpan=0.5, ...
                  YLimits=[-1 1], ...
                  Name="Octave-Down Output");

%% 5) State variables -----------------------------------------------------
flipState  = 1;                 % ±1 square
prev       = 0;                 % previous sample for zero-cross
env        = 0;                 % envelope follower
fcCurrent  = fcInit;
alphaLPF   = exp(-2*pi*fcCurrent/Fs);   % 1-pole coeff
lpfState   = 0;

fprintf("Streaming… close GUI window to quit.\n");

%% 6) Processing loop -----------------------------------------------------
while isvalid(ui)
    dry = reader();
    if isempty(dry), break; end                      % EOF guard
    if size(dry,2) > 1, dry = mean(dry,2); end       % mono
    dry = double(dry);

    % --- Mu-Tron divider + fast envelope -------------------------------
    wet = zeros(size(dry));
    for n = 1:block
        s = dry(n);

        % positive zero-cross ⇒ toggle square
        if prev <= 0 && s > 0
            flipState = -flipState;
        end
        prev = s;

        env = max(abs(s), dynSens*env);   % envelope follower
        wet(n) = flipState * env;         % const-amp square * dynamics
    end

    % --- Update LPF if slider moved ------------------------------------
    fcNew = cutS.Value;
    if abs(fcNew - fcCurrent) >= fcStep
        fcCurrent = fcNew;
        alphaLPF  = exp(-2*pi*fcCurrent/Fs);
    end

    % --- First-order low-pass on sub -----------------------------------
    for n = 1:block
        lpfState = alphaLPF*lpfState + (1-alphaLPF)*wet(n);
        wet(n)   = lpfState;
    end

    % --- Wet/Dry blend + anti-clip -------------------------------------
    mix = wetS.Value;
    out = (1-mix)*dry + mix*wet;
    out = out ./ max(1, max(abs(out)));   % peak-norm

    % --- Output + scope -------------------------------------------------
    player(out);
    scope(out);
    drawnow limitrate
end

%% 7) Cleanup -------------------------------------------------------------
release(reader);  release(player);  release(scope);
if isvalid(ui), delete(ui); end
disp("Stopped.");
end
